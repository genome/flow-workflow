#!/usr/bin/env python

from backend.redisbackend import RedisBackend
from redis import Redis
import argparse
import flow
import json
import os
import pwd
import subprocess
import sys
import tempfile
import workflowxml

if __name__ == "__main__":
    uid = os.getuid()
    user_name = pwd.getpwuid(uid).pw_name
    fields = {
        "user_id": uid,
        "user_name": user_name,
        "environment": os.environ.data,
        "working_directory": os.getcwd()
    }

    parser = argparse.ArgumentParser(description="Submit a workflow to be run")
    parser.add_argument('xml', help="A valid workflow xml file")
    parser.add_argument('inputs', help="A json file containing the workflow inputs")
    parser.add_argument('--block', action="store_true", default=False,
                        help="Block until workflow execution is complete")

    args = parser.parse_args()

    xml = open(args.xml).read()
    flow = workflowxml.Parser(xml).flow
    input_str = open(args.inputs).read()
    initial_outputs = json.loads(input_str)
    conn = Redis("vmpool83")
    backend = RedisBackend(conn)
    backend.store_flow(flow)
    backend.store_job_outputs(flow.id, 0, initial_outputs)
    mypath = os.path.dirname(os.path.realpath(sys.argv[0]))
    basedir = os.path.dirname(mypath)
    os.chdir(basedir)
    submit_ruote = os.path.join(mypath, "submit-ruote")
    tmp = tempfile.NamedTemporaryFile(delete=False)
    ruote_dsl = json.dumps(flow.ruote_dsl(fields))
    tmp.write(ruote_dsl)
    tmp.close()
    print "Ruote process definition written to", tmp.name
    cmdline = ["bundle", "exec", submit_ruote, tmp.name]
    if args.block:
        cmdline.append("--block")
    ret = subprocess.call(cmdline)
    tmp.unlink(tmp.name)
    if ret != 0:
        print "Workflow submission failed!"
        sys.exit(ret)
