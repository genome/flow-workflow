#!/usr/bin/env python

from redis import Redis
import argparse
import flow_workflow.workflowxml as wfxml
import json
import os
import pika
import pwd
import subprocess
import sys
import tempfile

if __name__ == "__main__":
    redis_url = os.getenv("FLOW_REDIS_URL")
    amqp_url = os.getenv("AMQP_URL")
    if not redis_url:
        print "Environment variable FLOW_REDIS_URL not defined!"
        sys.exit(1)

    if not redis_url:
        print "Environment variable AMQP_URL not defined!"
        sys.exit(1)

    uid = os.getuid()
    user_name = pwd.getpwuid(uid).pw_name

    parser = argparse.ArgumentParser(description="Submit a workflow to be run")
    parser.add_argument('xml', help="A valid workflow xml file")
    parser.add_argument('inputs', help="A json file containing the workflow inputs")
    parser.add_argument('--block', default=False, action="store_true",
                        help="Block until the workflow is finished")

    args = parser.parse_args()
    conn = Redis(redis_url)

    xml = open(args.xml).read()
    input_str = open(args.inputs).read()
    initial_outputs = json.loads(input_str)
    wfxml= wfxml.Parser(xml, initial_outputs)
    flow = wfxml.flow(conn)
    flow.user_id = uid
    flow.environment = os.environ.data
    flow.working_directory = os.getcwd()

    mypath = os.path.dirname(os.path.realpath(sys.argv[0]))
    basedir = os.path.dirname(mypath)
    os.chdir(basedir)

    routing_key = "flow.node.execute"
    body = json.dumps({
        "node_key": flow.node(0).key,
        "message_class": "ExecuteNodeMessage",
    })

    conn = pika.BlockingConnection(pika.URLParameters(amqp_url))
    qchannel = conn.channel()
    qchannel.exchange_declare(
        exchange="workflow",
        exchange_type="topic",
        durable=True,
        arguments={"alternate-exchange": "workflow.alt"}
        )
    qchannel.basic_publish(
        exchange="workflow",
        routing_key=routing_key,
        body=body,
        properties=pika.BasicProperties(
            delivery_mode=2,
        )
    )

    if args.block:
        cmdline = ['wait_for_flow.py', flow.key]
        sys.exit(subprocess.call(cmdline))
