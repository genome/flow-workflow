#!/usr/bin/env python

from pprint import pprint
import flow.redisom as rom
from redis import Redis
import argparse
import json
import os
import pika
import subprocess
import sys

mypath = os.path.dirname(sys.argv[0])
PERL_WRAPPER = os.path.join(mypath, "workflow-wrapper.pl")

def command(args, inputs_file, outputs_file):
    return ["command", args.method, args.command, inputs_file, outputs_file]

def command_filter_inputs(args, inputs):
    if args.parallel_by != None:
        inputs[args.parallel_by] = inputs[args.parallel_by][args.parallel_by_index]
    return inputs

def event(args, inputs_file, outputs_file):
    return ["event", args.method, args.event_id, outputs_file]

def main(args):
#    cmdline = ["annotate-log", PERL_WRAPPER]
    cmdline = [PERL_WRAPPER]
    if args.inputs_file is None:
        args.inputs_file = "/dev/null"

    cmdline.extend(args.build_cmdline(args, args.inputs_file, args.outputs_file))

    print "Calling perl wrapper", cmdline
    exit_code = subprocess.call(cmdline)
    if exit_code == 0:
        outputs = json.load(open(args.outputs_file))

    return exit_code

#def run_event(args):
##    cmdline = ["annotate-log", PERL_WRAPPER]
#    cmdline = [PERL_WRAPPER]
#    cmdline.extend(event(args))
#    return subprocess.call(cmdline)
#
#def main(args):
#    args.do_cmdline(args)


def parse_args():
    parser = argparse.ArgumentParser('Interact with workflow')

    subparsers = parser.add_subparsers()
    cmd_parser = subparsers.add_parser("command")
    cmd_parser.add_argument("method", help="shortcut or execute")
    cmd_parser.add_argument("command", help="The command class")
    cmd_parser.add_argument("--inputs-file", default=None,
            help="Path to a file containing inputs in json format")
    cmd_parser.add_argument("--outputs-file", default=None,
            help="Path to a file containing outputs in json format")
    cmd_parser.add_argument("--parallel-by")
    cmd_parser.add_argument("--parallel-by-index", type=int)
    cmd_parser.add_argument("--reply", action="store_true", default=False)
    cmd_parser.set_defaults(build_cmdline=command)
    cmd_parser.set_defaults(filter_inputs=command_filter_inputs)

    event_parser = subparsers.add_parser("event")
    event_parser.add_argument("method", help="shortcut or execute")
    event_parser.add_argument("event_id", help="The event id")
    event_parser.add_argument("--inputs-file", default=None,
            help="Path to a file containing inputs in json format")
    event_parser.add_argument("--outputs-file", default=None,
            help="Path to a file containing outputs in json format")
    event_parser.set_defaults(build_cmdline=event)
    event_parser.set_defaults(filter_inputs=None)

    return parser.parse_args()


if __name__ == "__main__":
    print "HERE IS THE WRAPPER"
    print sys.argv

    args = parse_args()
    exit_code = main(args)
    sys.exit(exit_code)
